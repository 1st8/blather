{"tagline":"XMPP/Jabber Library and DSL for Ruby written on EventMachine and Nokogiri.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Blather [ ![Build status](http://travis-ci.org/adhearsion/blather.png) ](http://travis-ci.org/adhearsion/blather)\r\n\r\nXMPP DSL (and more) for Ruby written on [EventMachine](http://rubyeventmachine.com/) and [Nokogiri](http://nokogiri.org/).\r\n\r\n## Features\r\n\r\n* evented architecture\r\n* uses Nokogiri\r\n* simplified starting point\r\n\r\n## Project Pages\r\n\r\n* [GitHub](https://github.com/adhearsion/blather)\r\n* [Gemcutter](http://gemcutter.org/gems/blather)\r\n* [API Documentation](http://rdoc.info/gems/blather/file/README.md)\r\n* [Google Group](http://groups.google.com/group/xmpp-blather)\r\n\r\n# Usage\r\n\r\n## Installation\r\n\r\n    gem install blather\r\n\r\n## Example\r\n\r\nBlather comes with a DSL that makes writing XMPP bots quick and easy. See the examples directory for more advanced examples.\r\n\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'blather/client'\r\n\r\nsetup 'echo@jabber.local', 'echo'\r\n\r\n# Auto approve subscription requests\r\nsubscription :request? do |s|\r\n  write_to_stream s.approve!\r\nend\r\n\r\n# Echo back what was said\r\nmessage :chat?, :body do |m|\r\n  write_to_stream m.reply\r\nend\r\n```\r\n\r\n## Handlers\r\n\r\nHandlers let Blather know how you'd like each type of stanza to be well.. handled. Each type of stanza has an associated handler which is part of a handler hierarchy. In the example above we're handling message and subscription stanzas.\r\n\r\nXMPP is built on top of three main stanza types (presence, message, and iq). All other stanzas are built on these three base types. This creates a natural hierarchy of handlers. For example a subscription stanza is a type of presence stanza and can be processed by a subscription handler or a presence handler. Likewise, a PubSub::Items stanza has its own identifier :pubsub_items but it's also a :pubsub_node, :iq and :staza. Any or each of these could be used to handle the PubSub::Items stanza. If you've done any DOM programming you'll be familiar with this.\r\n\r\nIncoming stanzas will be handled by the first handler found. Unlike the DOM this will stop the handling bubble unless the handler returns false.\r\n\r\nThe entire handler hierarchy can be seen below.\r\n\r\n### Example\r\n\r\nHere we have a presence handler and a subscription handler. When this script receives a subscription stanza the subscription handler will be notified first. If that handler doesn't know what to do it can return false and let the stanza bubble up to the presence handler.\r\n\r\n```ruby\r\n# Handle all presence stanzas\r\npresence do |stanza|\r\n  # do stuff\r\nend\r\n\r\n# Handle all subscription stanzas\r\nsubscription do |stanza|\r\n  # do stuff\r\nend\r\n```\r\n\r\nAdditionally, handlers may be 'guarded'. That is, they may have conditions set declaratively, against which the stanza must match in order to trigger the handler.\r\n\r\n```ruby\r\n# Will only be called for messages where #chat? responds positively\r\n# and #body == 'exit'\r\nmessage :chat?, :body => 'exit'\r\n```\r\n\r\n### Non-Stanza Handlers\r\n\r\nSo far there are two non-stanza related handlers.\r\n\r\n```ruby\r\n# Called after the connection has been connected. It's good for initializing\r\n# your system.\r\n# DSL:\r\nwhen_ready {}\r\n# Client:\r\nclient.register_handler(:ready) {}\r\n\r\n# Called after the connection has been terminated. Good for teardown or\r\n# automatic reconnection.\r\n# DSL:\r\ndisconnected {}\r\n# Client\r\nclient.register_handler(:disconnected) {}\r\n# The following will reconnect every time the connection is lost:\r\ndisconnected { client.connect }\r\n```\r\n\r\n### Handler Guards\r\n\r\nGuards are a concept borrowed from Erlang. They help to better compartmentalize handlers.\r\n\r\nThere are a number of guard types and one bit of special syntax. Guards act like AND statements. Each condition must be met if the handler is to\r\nbe used.\r\n\r\n```ruby\r\n# Equivalent to saying (stanza.chat? && stanza.body)\r\nmessage :chat?, :body\r\n```\r\n\r\nThe different types of guards are:\r\n\r\n```ruby\r\n# Symbol\r\n#   Checks for a non-false reply to calling the symbol on the stanza\r\n#   Equivalent to stanza.chat?\r\nmessage :chat?\r\n\r\n# Hash with any value (:body => 'exit')\r\n#   Calls the key on the stanza and checks for equality\r\n#   Equivalent to stanza.body == 'exit'\r\nmessage :body => 'exit'\r\n\r\n# Hash with regular expression (:body => /exit/)\r\n#   Calls the key on the stanza and checks for a match\r\n#   Equivalent to stanza.body.match /exit/\r\nmessage :body => /exit/\r\n\r\n# Hash with array (:name => [:gone, :forbidden])\r\n#   Calls the key on the stanza and check for inclusion in the array\r\n#   Equivalent to [:gone, :forbidden].include?(stanza.name)\r\nstanza_error :name => [:gone, :fobidden]\r\n\r\n# Proc\r\n#   Calls the proc passing in the stanza\r\n#   Checks that the ID is modulo 3\r\nmessage proc { |m| m.id % 3 == 0 }\r\n\r\n# Array\r\n#   Use arrays with the previous types effectively turns the guard into\r\n#   an OR statement.\r\n#   Equivalent to stanza.body == 'foo' || stanza.body == 'baz'\r\nmessage [{:body => 'foo'}, {:body => 'baz'}]\r\n\r\n# XPath\r\n#   Runs the xpath query on the stanza and checks for results\r\n#   This guard type cannot be combined with other guards\r\n#   Equivalent to !stanza.find('/iq/ns:pubsub', :ns => 'pubsub:namespace').empty?\r\n#   It also passes two arguments into the handler block: the stanza and the result\r\n#   of the xpath query.\r\niq '/iq/ns:pubsub', :ns => 'pubsub:namespace' do |stanza, xpath_result|\r\n  # stanza will be the original stanza\r\n  # xpath_result will be the pubsub node in the stanza\r\nend\r\n```\r\n\r\n### Filters\r\n\r\nBlather provides before and after filters that work much the way regular\r\nhandlers work. Filters come in a before and after flavor. They're called in\r\norder of definition and can be guarded like handlers.\r\n\r\n```ruby\r\nbefore { |s| \"I'm run before any handler\" }\r\nbefore { |s| \"I'm run next\" }\r\n\r\nbefore(:message) { |s| \"I'm only run in front of message stanzas\" }\r\nbefore(nil, :id => 1) { |s| \"I'll only be run when the stanza's ID == 1\" }\r\n\r\n# ... handlers\r\n\r\nafter { |s| \"I'm run after everything\" }\r\n```\r\n\r\n### Handlers Hierarchy\r\n\r\n```\r\nstanza\r\n|- iq\r\n|  |- pubsub_node\r\n|  |  |- pubsub_affiliations\r\n|  |  |- pubsub_create\r\n|  |  |- pubsub_items\r\n|  |  |- pubsub_publish\r\n|  |  |- pubsub_retract\r\n|  |  |- pubsub_subscribe\r\n|  |  |- pubsub_subscription\r\n|  |  |- pubsub_subscriptions\r\n|  |  `- pubsub_unsubscribe\r\n|  |- pubsub_owner\r\n|  |  |- pubsub_delete\r\n|  |  `- pubsub_purge\r\n|  `- query\r\n|     |- disco_info\r\n|     |- disco_items\r\n|     `- roster\r\n|- message\r\n|  `- pubsub_event\r\n`- presence\r\n   |- status\r\n   `- subscription\r\n\r\nerror\r\n|- argument_error\r\n|- parse_error\r\n|- sasl_error\r\n|- sasl_unknown_mechanism\r\n|- stanza_error\r\n|- stream_error\r\n|- tls_failure\r\n`- unknown_response_error\r\n```\r\n\r\n## On the Command Line\r\n\r\nDefault usage is:\r\n\r\n```\r\n[blather_script] [options] node@domain.com/resource password [host] [port]\r\n```\r\n\r\nCommand line options:\r\n\r\n```\r\n-D, --debug       Run in debug mode (you will see all XMPP communication)\r\n-d, --daemonize   Daemonize the process\r\n    --pid=[PID]   Write the PID to this file\r\n    --log=[LOG]   Write to the [LOG] file instead of stdout/stderr\r\n-h, --help        Show this message\r\n-v, --version     Show version\r\n```\r\n\r\n## Health warning\r\n\r\nSome parts of Blather will allow you to do stupid things that don't conform to XMPP\r\nspec. You should exercise caution and read the relevant specifications (indicated in\r\nthe preamble to most relevant classes).\r\n\r\n## Spec compliance\r\n\r\nBlather provides support in one way or another for many XMPP specifications. Below is a list of specifications and the status of support for them in Blather. This list *may not be correct*. If the list indicates a lack of support for a specification you wish to use, you are encouraged to check that this is correct. Likewise, if you find an overstatement of Blather's spec compliance, please point this out. Also note that even without built-in support for a specification, you can still manually construct and parse stanzas alongside use of Blather's built-in helpers.\r\n\r\nSpecification | Support | Notes\r\n------------- | ------- | -----\r\nRFC 6120      | Full    |\r\nRFC 6121      | Full    |\r\nRFC 6122      | Full    |\r\nXEP-0001      | N/A     |\r\nXEP-0002      | N/A     |\r\nXEP-0004      | Partial |\r\nXEP-0009      | None    |\r\nXEP-0012      | None    |\r\nXEP-0013      | None    |\r\nXEP-0016      | None    |\r\nXEP-0019      | N/A     |\r\nXEP-0020      | Partial |\r\nXEP-0027      | None    |\r\nXEP-0030      | Partial |\r\nXEP-0033      | None    |\r\nXEP-0045      | Partial |\r\nXEP-0047      | None    |\r\nXEP-0048      | None    |\r\nXEP-0049      | None    |\r\nXEP-0050      | Partial |\r\nXEP-0053      | None    |\r\nXEP-0054      | None    |\r\nXEP-0055      | None    |\r\nXEP-0059      | None    |\r\nXEP-0060      | Partial |\r\nXEP-0065      | None    |\r\nXEP-0066      | None    |\r\nXEP-0068      | None    |\r\nXEP-0070      | None    |\r\nXEP-0071      | Partial |\r\nXEP-0072      | None    |\r\nXEP-0076      | None    |\r\nXEP-0077      | None    |\r\nXEP-0079      | None    |\r\nXEP-0080      | None    |\r\nXEP-0082      | None    |\r\nXEP-0083      | None    |\r\nXEP-0084      | None    |\r\nXEP-0085      | Partial |\r\nXEP-0092      | None    |\r\nXEP-0095      | Partial |\r\nXEP-0096      | Partial |\r\nXEP-0100      | None    |\r\nXEP-0106      | None    |\r\nXEP-0107      | None    |\r\nXEP-0108      | None    |\r\nXEP-0114      | Full    |\r\nXEP-0115      | Partial |\r\nXEP-0118      | None    |\r\nXEP-0122      | None    |\r\nXEP-0124      | None    |\r\nXEP-0126      | None    |\r\nXEP-0127      | None    |\r\nXEP-0128      | None    |\r\nXEP-0130      | None    |\r\nXEP-0131      | None    |\r\nXEP-0132      | None    |\r\nXEP-0133      | None    |\r\nXEP-0134      | None    |\r\nXEP-0136      | None    |\r\nXEP-0137      | None    |\r\nXEP-0138      | None    |\r\nXEP-0141      | None    |\r\nXEP-0143      | None    |\r\nXEP-0144      | N/A     |\r\nXEP-0145      | None    |\r\nXEP-0146      | None    |\r\nXEP-0147      | None    |\r\nXEP-0148      | None    |\r\nXEP-0149      | None    |\r\nXEP-0153      | None    |\r\nXEP-0155      | None    |\r\nXEP-0156      | None    |\r\nXEP-0157      | None    |\r\nXEP-0158      | None    |\r\nXEP-0160      | None    |\r\nXEP-0163      | Partial |\r\nXEP-0166      | None    |\r\nXEP-0167      | None    |\r\nXEP-0169      | None    |\r\nXEP-0170      | None    |\r\nXEP-0171      | None    |\r\nXEP-0172      | None    |\r\nXEP-0174      | None    |\r\nXEP-0175      | None    |\r\nXEP-0176      | None    |\r\nXEP-0177      | None    |\r\nXEP-0178      | None    |\r\nXEP-0182      | N/A     |\r\nXEP-0183      | None    |\r\nXEP-0184      | None    |\r\nXEP-0185      | None    |\r\nXEP-0191      | None    |\r\nXEP-0198      | None    |\r\nXEP-0199      | Partial |\r\nXEP-0201      | None    |\r\nXEP-0202      | None    |\r\nXEP-0203      | Partial |\r\nXEP-0205      | None    |\r\nXEP-0206      | None    |\r\nXEP-0207      | None    |\r\nXEP-0220      | None    |\r\nXEP-0221      | None    |\r\nXEP-0222      | None    |\r\nXEP-0223      | None    |\r\nXEP-0224      | None    |\r\nXEP-0227      | None    |\r\nXEP-0229      | None    |\r\nXEP-0231      | None    |\r\nXEP-0233      | None    |\r\nXEP-0234      | None    |\r\nXEP-0239      | None    |\r\nXEP-0242      | None    |\r\nXEP-0243      | None    |\r\nXEP-0245      | None    |\r\nXEP-0249      | None    |\r\nXEP-0256      | None    |\r\nXEP-0258      | None    |\r\nXEP-0260      | None    |\r\nXEP-0261      | None    |\r\nXEP-0262      | None    |\r\nXEP-0263      | None    |\r\nXEP-0266      | None    |\r\nXEP-0267      | None    |\r\nXEP-0270      | None    |\r\nXEP-0273      | None    |\r\nXEP-0277      | None    |\r\nXEP-0278      | None    |\r\nXEP-0280      | None    |\r\nXEP-0288      | None    |\r\nXEP-0292      | None    |\r\nXEP-0293      | None    |\r\nXEP-0294      | None    |\r\nXEP-0295      | None    |\r\nXEP-0296      | None    |\r\nXEP-0297      | None    |\r\nXEP-0298      | None    |\r\nXEP-0299      | None    |\r\nXEP-0300      | None    |\r\nXEP-0301      | None    |\r\nXEP-0302      | None    |\r\nXEP-0303      | None    |\r\nXEP-0304      | None    |\r\nXEP-0305      | None    |\r\nXEP-0306      | None    |\r\nXEP-0307      | None    |\r\nXEP-0308      | None    |\r\nXEP-0309      | None    |\r\nXEP-0310      | None    |\r\nXEP-0311      | None    |\r\nXEP-0312      | None    |\r\n\r\n\r\n# Contributions\r\n\r\nAll contributions are welcome, even encouraged. However, contributions must be\r\nwell tested. If you send me a branch name to merge that'll get my attention faster\r\nthan a change set made directly on master.\r\n\r\n# Author\r\n\r\n* [Jeff Smick](http://github.com/sprsquish)\r\n* [Other Contributors](https://github.com/adhearsion/blather/contributors)\r\n\r\n# Copyright\r\n\r\nCopyright (c) 2012 Adhearsion Foundation Inc. See LICENSE for details.\r\n","name":"Blather"}