= Blather

XMPP DSL (and more) for Ruby written on EventMachine and Nokogiri.

== Features

* evented architecture
* uses Nokogiri
* simplified starting point

== Project Pages

Blather:: https://sprsquish.github.com/blather

GitHub:: https://github.com/sprsquish/blather

GitHub Docs:: http://docs.github.com/sprsquish/blather

RubyForge:: http://rubyforge.org/projects/squishtech

RDocs:: http://squishtech.rubyforge.org/blather

Google Group:: http://groups.google.com/group/xmpp-blather

= Usage

== Installation

  sudo gem install blather

== Example

See the examples directory for more advanced examples.

This will auto-accept any subscription requests and echo back any chat messages.

  require 'rubygems'
  require 'blather/client'

  setup 'echo@jabber.local', 'echo'

  # Auto approve subscription requests
  subscription :request? do |s|
    write s.approve!
  end

  # Echo back what was said
  message :chat?, :body do |m|
    write m.reply
  end

== Handlers

Setup handlers by calling their names as methods.

  # Will only be called for messages where #chat? responds positively
  # and #body == 'exit'
  message :chat?, :body => 'exit'

=== Handler Guards

Guards act like AND statements. Each condition must be met if the handler is to be used.

  # Equivalent to saying (stanza.chat? && stanza.body)
  message :chat?, :body

The different types of guards are:

  # Symbol
  #   Checks for a non-false reply to calling the symbol on the stanza
  #   Equivalent to stanza.chat?
  message :chat?

  # Hash with any value (:body => 'exit')
  #   Calls the key on the stanza and checks for equality
  #   Equivalent to stanza.body == 'exit'
  message :body => 'exit'

  # Hash with regular expression (:body => /exit/)
  #   Calls the key on the stanza and checks for a match
  #   Equivalent to stanza.body.match /exit/
  message :body => /exit/

  # Hash with array (:name => [:gone, :forbidden])
  #   Calls the key on the stanza and check for inclusion in the array
  #   Equivalent to [:gone, :forbidden].include?(stanza.name)
  stanza_error :name => [:gone, :fobidden]

  # Proc
  #   Calls the proc passing in the stanza
  #   Checks that the ID is modulo 3
  message proc { |m| m.id % 3 == 0 }

  # Array
  #   Use arrays with the previous types effectively turns the guard into
  #   an OR statement.
  #   Equivalent to stanza.body == 'foo' || stanza.body == 'baz'
  message [{:body => 'foo'}, {:body => 'baz'}]

  # XPath
  #   Runs the xpath query on the stanza and checks for results
  #   This guard type cannot be combined with other guards
  #   Equivalent to !stanza.find('/iq/ns:pubsub', :ns => 'pubsub:namespace').empty?
  iq '/iq/ns:pubsub', :ns => 'pubsub:namespace'

=== Filters

Blather provides before and after filters that work much the way regular handlers work. Filters come in a before and after
flavor. They're called in order of definition and can be guarded like handlers.

  before { |s| "I'm run before any handler" }
  before { |s| "I'm run next" }

  before(:message) { |s| "I'm only run in front of message stanzas" }
  before(nil, :id => 1) { |s| "I'll only be run when the stanza's ID == 1" }

  # ... handlers

  after { |s| "I'm run after everything" }

== On the Command Line:

Default usage is:

  [blather_script] [options] node@domain.com/resource password [host] [port]

Command line options:

  -D, --debug                      Run in debug mode (you will see all XMPP communication)
  -d, --daemonize                  Daemonize the process
      --pid=[PID]                  Write the PID to this file
      --log=[LOG]                  Write to the [LOG] file instead of stdout/stderr
  -h, --help                       Show this message
  -v, --version                    Show version


= TODO

* Add Disco the the DSL
* More examples (Re-write XMPP4R examples into Blather)

= Author

Jeff Smick <sprsquish@gmail.com>

=== Contributors

Nolan Darilek <nolan@thewordnerd.info>

= License

Blather

Copyright (c) 2009 Jeff Smick
 
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
 
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
